#include<iostream>

using namespace std;

enum enQuestionsLevel { EasyLevel = 1, MedLevel, HardLevel,Mix };
enum enOperationType{Add=1,Sub,Mul,Div,MixOp};

string GetOpTypeSymbol(enOperationType OpType)
{
	switch (OpType)
	{
	case Add:
		return"+";
	case Sub:
		return"-";
	case Mul:
		return"x";
	case Div:
		return"/";
	default:
		return "Mix";
	}
}
string GetQuestionLevelText(enQuestionsLevel QuestionLevel)
{
	string arrQuestionLevelText[4] = { "Easy","Med","Hard","Mix" };
	return arrQuestionLevelText[QuestionLevel - 1];
}
int RandomNumber(int From, int To)
{
	int randNum = rand() % (To - From + 1) + From;
	return randNum;
}
short ReadHowManyQuestions()
{
	short NumberOfQuestions;
	do
	{
		cout << "How many questions do you want to answer? ";
		cin >> NumberOfQuestions;
	} while (NumberOfQuestions < 1 || NumberOfQuestions>10);
	return NumberOfQuestions;
}
enQuestionsLevel ReadQuestionsLevel()
{
	short QuestionsLevel = 0;
	do
	{
		cout << "Enter questions level [1] Easy, [2] Med, [3] Hard, [4] Mix ?";
		cin >> QuestionsLevel;
	} while (QuestionsLevel < 1 || QuestionsLevel>4);
	return (enQuestionsLevel)QuestionsLevel;
}
enOperationType ReadOpType()
{
	short OpType;
	do
	{
		cout << "Enter operation type [1] Add, [2] Sub, [3] Mul, [4] Div, [5]Mix ? ";
		cin >> OpType;
	} while (OpType < 1 || OpType>5);
	return (enOperationType)OpType;
}
struct stQuestion
{
	int Number1 = 0;
	int Number2 = 0;
	enOperationType OperationType;
	enQuestionsLevel QuestionsLevel;
	int CorrectAnswer = 0;
	int PlayerAnswer = 0;
	bool AnswerResult = false;
};
struct stQuizz
{
	stQuestion QuestionList[100];
	short NumberOfQuestions;
	enQuestionsLevel QuestionsLevel;
	enOperationType OpType;
	short NumberOfWrongAnswers = 0;
	short NumberOfRightAnswers = 0;
	bool isPass = false;
};
int SimpleCalculator(int Number1, int Number2, enOperationType OpType)
{
	switch (OpType)
	{
	case Add:
		return Number1 + Number2;
	case Sub:
		return Number1 - Number2;
	case Mul:
		return Number1 * Number2;
	case Div:
		return Number1 / Number2;
	default:
		return Number1 + Number2;
	}
}
enOperationType GetRandomOperationType()
{
	int Op = RandomNumber(1, 4);
	return (enOperationType)Op;
}
stQuestion GenerateQuestion(enQuestionsLevel QuestionLevel, enOperationType OpType)
{
	stQuestion Question;
	if (QuestionLevel == enQuestionsLevel::Mix)
		QuestionLevel = (enQuestionsLevel)RandomNumber(1, 3);
	if(OpType== enOperationType::MixOp)
		OpType=GetRandomOperationType();
	Question.OperationType = OpType;

	switch (QuestionLevel)
	{
	case EasyLevel:
		Question.Number1 = RandomNumber(1, 10);
		Question.Number2 = RandomNumber(1, 10);

		Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
		Question.QuestionsLevel = QuestionLevel;
		return Question;
	case MedLevel:
		Question.Number1 = RandomNumber(10, 50);
		Question.Number2 = RandomNumber(10, 50);

		Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
		Question.QuestionsLevel = QuestionLevel;
		return Question;
	case HardLevel:
		Question.Number1 = RandomNumber(50, 100);
		Question.Number2 = RandomNumber(50, 100);

		Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
		Question.QuestionsLevel = QuestionLevel;
		return Question;
	}
	return Question;
}
void GenerateQuizzQuestions(stQuizz &Quizz)
{
	for (short Question = 0; Question < Quizz.NumberOfQuestions; Question++)
		Quizz.QuestionList[Question] = GenerateQuestion(Quizz.QuestionsLevel, Quizz.OpType);
}
int ReadQuestionAnswer()
{
	int Answer=0;
	cin >> Answer;
	return Answer;
}
void SetScreenColor(bool AnswerResult)
{
	switch (AnswerResult)
	{
	case true:
		system("color 2F");
		break;
	case false:
		system("color 4F");
		cout << "\a";
		break;
	default:
		system("color 6F");
		break;
	}
}
void PrintTheQuestion(stQuizz& Quizz, short QuestionNumber)
{
	cout << endl;
	cout << "Question [" << QuestionNumber + 1 << "/" << Quizz.NumberOfQuestions << "]\n\n";
	cout << Quizz.QuestionList[QuestionNumber].Number1 << endl;
	cout<< Quizz.QuestionList[QuestionNumber].Number2 << " ";
	cout << GetOpTypeSymbol(Quizz.QuestionList[QuestionNumber].OperationType);
	cout << "\n_________" << endl;
}
void CorrectTheQuestionAnswer(stQuizz& Quizz, short QuestionNumber)
{
	if (Quizz.QuestionList[QuestionNumber].PlayerAnswer != Quizz.QuestionList[QuestionNumber].CorrectAnswer)
	{
		Quizz.QuestionList[QuestionNumber].AnswerResult = false;
		Quizz.NumberOfWrongAnswers++;

		cout << "Wrong Answer :-(\n";
		cout << "The right answer is: ";
		cout << Quizz.QuestionList[QuestionNumber].CorrectAnswer;
		cout << "\n";

	}
	else
	{
		Quizz.QuestionList[QuestionNumber].AnswerResult = true;
		Quizz.NumberOfRightAnswers++;

		cout << "Right Answer :-)\n";
	}
	cout << endl;
	SetScreenColor(Quizz.QuestionList[QuestionNumber].AnswerResult);
}
void AskAndCorrctQuestionListAnswer(stQuizz& Quizz)
{
	for (short QuestionNumber = 0; QuestionNumber < Quizz.NumberOfQuestions; QuestionNumber++)
	{
		PrintTheQuestion(Quizz, QuestionNumber);
		Quizz.QuestionList[QuestionNumber].PlayerAnswer = ReadQuestionAnswer();
		CorrectTheQuestionAnswer(Quizz, QuestionNumber);
	}
	Quizz.isPass = (Quizz.NumberOfRightAnswers >= Quizz.NumberOfWrongAnswers);
}
string GetFinalResultsTesxts(bool Pass)
{
	if (Pass)
		return"Pass :-)\n";
	else
		return "Fail :-(\n";
}
void PrintQuizzResults(stQuizz Quizz)
{
	cout << endl;
	cout << "_____________________________\n\n";
	cout << "Final Results is " << GetFinalResultsTesxts(Quizz.isPass);
	cout << "\n_____________________________\n\n";

	cout << "Number of questions: " << Quizz.NumberOfQuestions << endl;
	cout << "Questions Level    : " << GetQuestionLevelText(Quizz.QuestionsLevel) << endl;
	cout << "OpType             : "<<GetOpTypeSymbol(Quizz.OpType)<<endl;
	cout << "Number of right answers: "<<Quizz.NumberOfRightAnswers<<endl;
	cout << "Number of wrong answers: " << Quizz.NumberOfWrongAnswers << endl;
	cout << "_____________________________\n";
		
}
void PlayMathGame()
{
	stQuizz Quizz;
	Quizz.NumberOfQuestions = ReadHowManyQuestions();
	Quizz.QuestionsLevel = ReadQuestionsLevel();
	Quizz.OpType = ReadOpType();

	GenerateQuizzQuestions(Quizz);

	AskAndCorrctQuestionListAnswer(Quizz);
	PrintQuizzResults(Quizz);
}
void ResetScreen()
{
	system("cls");
	system("color 0F");
}
void StartGame()
{
	char PlayAgain='Y';
	do
	{
		ResetScreen();
		PlayMathGame();

		cout <<endl<< "Do you want to play again? Y/N? ";
		cin >> PlayAgain;

	} while (PlayAgain == 'y' || PlayAgain == 'Y');

}
int main()
{
	srand((unsigned)time(NULL));
	
	StartGame();
	
	return 0;
}