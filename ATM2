#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <iomanip>

using namespace std;
const string ClientsFileName = "Clients.txt";
void ATMMainScreen();
struct sClient
{
    string AccountNumber;
    string PinCode;
    string Name;
    string Phone;
    double AccountBalance;
    bool MarkForDelete = false;


};

sClient CurrentClient;

void LoginScreen();

vector<string> SplitString(string S1, string Delim)
{

    vector<string> vString;

    short pos = 0;
    string sWord; // define a string variable  

    // use find() function to get the position of the delimiters  
    while ((pos = S1.find(Delim)) != std::string::npos)
    {
        sWord = S1.substr(0, pos); // store the word   
        if (sWord != "")
        {
            vString.push_back(sWord);
        }

        S1.erase(0, pos + Delim.length());  /* erase() until positon and move to next word. */
    }

    if (S1 != "")
    {
        vString.push_back(S1); // it adds last word of the string.
    }

    return vString;

}

sClient ConvertLinetoRecord(string Line, string Seperator = "#//#")
{

    sClient Client;
    vector<string> vClientData;

    vClientData = SplitString(Line, Seperator);

    Client.AccountNumber = vClientData[0];
    Client.PinCode = vClientData[1];
    Client.Name = vClientData[2];
    Client.Phone = vClientData[3];
    Client.AccountBalance = stod(vClientData[4]);//cast string to double


    return Client;

}

string ConvertRecordToLine(sClient Client, string Seperator = "#//#")
{

    string stClientRecord = "";

    stClientRecord += Client.AccountNumber + Seperator;
    stClientRecord += Client.PinCode + Seperator;
    stClientRecord += Client.Name + Seperator;
    stClientRecord += Client.Phone + Seperator;
    stClientRecord += to_string(Client.AccountBalance);

    return stClientRecord;

}

bool ClientExistsByAccountNumber(string AccountNumber, string FileName)
{

    vector <sClient> vClients;

    fstream MyFile;
    MyFile.open(FileName, ios::in);//read Mode

    if (MyFile.is_open())
    {

        string Line;
        sClient Client;

        while (getline(MyFile, Line))
        {

            Client = ConvertLinetoRecord(Line);
            if (Client.AccountNumber == AccountNumber)
            {
                MyFile.close();
                return true;
            }


            vClients.push_back(Client);
        }

        MyFile.close();

    }

    return false;


}

vector <sClient> LoadCleintsDataFromFile(string FileName)
{

    vector <sClient> vClients;

    fstream MyFile;
    MyFile.open(FileName, ios::in);//read Mode

    if (MyFile.is_open())
    {

        string Line;
        sClient Client;

        while (getline(MyFile, Line))
        {

            Client = ConvertLinetoRecord(Line);

            vClients.push_back(Client);
        }

        MyFile.close();

    }

    return vClients;

}

void PrintClientRecordBalanceLine(sClient Client)
{

    cout << "| " << setw(15) << left << Client.AccountNumber;
    cout << "| " << setw(40) << left << Client.Name;
    cout << "| " << setw(12) << left << Client.AccountBalance;

}

void ShowTotalBalances()
{

    vector <sClient> vClients = LoadCleintsDataFromFile(ClientsFileName);

    cout << "\n\t\t\t\t\tBalances List (" << vClients.size() << ") Client(s).";
    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;

    cout << "| " << left << setw(15) << "Accout Number";
    cout << "| " << left << setw(40) << "Client Name";
    cout << "| " << left << setw(12) << "Balance";
    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;

    double TotalBalances = 0;

    if (vClients.size() == 0)
        cout << "\t\t\t\tNo Clients Available In the System!";
    else

        for (sClient Client : vClients)
        {

            PrintClientRecordBalanceLine(Client);
            TotalBalances += Client.AccountBalance;

            cout << endl;
        }

    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;
    cout << "\t\t\t\t\t   Total Balances = " << TotalBalances;

}

bool FindClientByAccountNumber(string AccountNumber, vector <sClient> vClients, sClient& Client)
{

    for (sClient C : vClients)
    {

        if (C.AccountNumber == AccountNumber)
        {
            Client = C;
            return true;
        }

    }
    return false;

}

vector <sClient> SaveCleintsDataToFile(string FileName, vector <sClient> vClients)
{

    fstream MyFile;
    MyFile.open(FileName, ios::out);//overwrite

    string DataLine;

    if (MyFile.is_open())
    {

        for (sClient C : vClients)
        {

            if (C.MarkForDelete == false)
            {
                //we only write records that are not marked for delete.  
                DataLine = ConvertRecordToLine(C);
                MyFile << DataLine << endl;

            }

        }

        MyFile.close();

    }

    return vClients;

}

void AddDataLineToFile(string FileName, string  stDataLine)
{
    fstream MyFile;
    MyFile.open(FileName, ios::out | ios::app);

    if (MyFile.is_open())
    {

        MyFile << stDataLine << endl;

        MyFile.close();
    }

}

enum enATMOptions { eQuickWithdraw=1,eNormalWithdraw = 2, eDeposit = 3,  eCheckBalance = 4, eLogout = 5 };

double ReadDepositAmount()
{
    double DepositAmount = 0;
    do
    {
        cout << "Enter Deposit Amount: ";
        cin >> DepositAmount;
    } while (DepositAmount < 0);
    return DepositAmount;
}

bool DepositBalanceToClientByAccountNumber(string AccountNumber, double Amount, vector <sClient>& vClients)
{


    char Answer = 'n';


    cout << "\n\nAre you sure you want perfrom this transaction? y/n ? ";
    cin >> Answer;
    if (Answer == 'y' || Answer == 'Y')
    {

        for (sClient& C : vClients)
        {
            if (C.AccountNumber == AccountNumber)
            {
                C.AccountBalance += Amount;
                CurrentClient.AccountBalance = C.AccountBalance;
                SaveCleintsDataToFile(ClientsFileName, vClients);
                cout << "\n\nDone Successfully. New balance is: " << C.AccountBalance;

                return true;
            }

        }


        return false;
    }

}

bool CheckBalanceForWithdraw(int WithdrawAmount)
{
    if (CurrentClient.AccountBalance < WithdrawAmount || !(WithdrawAmount % 5 == 0))
        return false;
    return true;
}

void GoBackToMainMenue()
{
    cout << "\n\nPress any key to go back to Main Menue...";
    system("pause>0");
    ATMMainScreen();

}

short ReadMainMenueOption()
{
    short Choice = 0;
    do
    {
        cout << "Choose what do you want to do? [1 to 5]? ";
        cin >> Choice;
    } while (Choice<1||Choice>5);

    return Choice;
}

short ReadQuickWithdrawOption()
{
    short Choice = 0;
    do
    {
        cout << "Enter option to withdraw: ";
        cin >> Choice;
    } while (Choice < 1 || Choice>9);

    return Choice;
}

bool Withdraw(int WithdrawAmount)
{
    vector<sClient>vClients = LoadCleintsDataFromFile(ClientsFileName);
    if (CheckBalanceForWithdraw(WithdrawAmount))
    {
        DepositBalanceToClientByAccountNumber(CurrentClient.AccountNumber, -WithdrawAmount, vClients);
        return true;
    }
    else
    {
        return false;
    }
}

void BalanceScreen()
{
    system("cls");
    cout << "===========================================\n";
    cout << "\t\tBalance Screen\n";
    cout << "===========================================\n";
    cout << "Your Balance is "<<CurrentClient.AccountBalance<<endl;
    cout << "===========================================\n";
}

void DepositScreen()
{
    system("cls");
    cout << "===========================================\n";
    cout << "\t\tDeposit Screen\n";
    cout << "===========================================\n";

    vector<sClient>vClients = LoadCleintsDataFromFile(ClientsFileName);
    DepositBalanceToClientByAccountNumber(CurrentClient.AccountNumber, ReadDepositAmount(), vClients);
}

void PerformNormalWithdraw()
{
    int WithdrawAmount=0;
    bool WithdrawFailed = false;
        do
        {
            cout << "Enter an amount multiple of 5's and must not exceed your balance: ";
            cin >> WithdrawAmount;
            WithdrawFailed = !Withdraw(WithdrawAmount);
        } while (WithdrawFailed);
}

void NormalWithdrawScreen()
{
    system("cls");
    cout << "===========================================\n";
    cout << "\t\tNormal Withdraw Screen\n";
    cout << "===========================================\n";
    cout << "Your Balance is " << CurrentClient.AccountBalance << endl;
    PerformNormalWithdraw();
    
}

short getQuickWithDrawAmount(short QuickWithdrawOption)
{
    switch(QuickWithdrawOption)
    {
    case 1:
        return 20;
    case 2:
        return 50;
    case 3:
        return 100;
    case 4:
        return 200;
    case 5:
        return 400;
    case 6:
        return 600;
    case 7:
        return 800;
    case 8:
        return 1000;
    }

}

void PerformQuickWithdrawOption(short QuickWithdrawOption)
{
    if(QuickWithdrawOption==9)
    {
        GoBackToMainMenue();
        return;
    }
    if (!Withdraw(getQuickWithDrawAmount(QuickWithdrawOption)))
    {
        cout << "Withdrawal amount exceeds your account balance\n";
        GoBackToMainMenue();
    }
}

void QuickWithdrawScreen()
{
    system("cls");
    cout << "===========================================\n";
    cout << "\t\tQuick Withdraw Screen\n";
    cout << "===========================================\n";
    cout << "\t[1] 20\t\t[2] 50\n";
    cout << "\t[3] 100\t\t[4] 200\n";
    cout << "\t[5] 400\t\t[6] 600\n";
    cout << "\t[7] 800\t\t[8] 1000\n";
    cout << "\t[9] Exit\n";
    cout << "===========================================\n";
    cout << "Your Balance is " << CurrentClient.AccountBalance<<endl;
    PerformQuickWithdrawOption(ReadQuickWithdrawOption());
}

void PerfromMainMenueOption(enATMOptions MainMenueOption)
{
    switch (MainMenueOption)
    {
    case eQuickWithdraw:
    {
        system("cls");
        QuickWithdrawScreen();
        GoBackToMainMenue();
        break;
    }
    case eNormalWithdraw:
        system("cls");
        NormalWithdrawScreen();
        GoBackToMainMenue();
        break;
    case eDeposit:
        system("cls");
        DepositScreen();
        GoBackToMainMenue();
        break;

    case eCheckBalance:
        system("cls");
        BalanceScreen();
        GoBackToMainMenue();
        break;

    case eLogout:
        system("cls");
        LoginScreen();
        break;
    }

}

void ATMMainScreen()
{
    system("cls");
    cout << "===========================================\n";
    cout << "\t\tATM Main Screen\n";
    cout << "===========================================\n";
    cout << "\t[1] Quick Withdarw.\n";
    cout << "\t[2] Normal Withdraw.\n";
    cout << "\t[3] Deposit.\n";
    cout << "\t[4] Check Balance.\n";
    cout << "\t[5] Logout.\n";
    cout << "===========================================\n";
    PerfromMainMenueOption((enATMOptions)ReadMainMenueOption());
}

bool LogInAccount(string AccountNumber, string PINCode)
{
    vector<sClient>vClients = LoadCleintsDataFromFile(ClientsFileName);
    if (FindClientByAccountNumber(AccountNumber, vClients, CurrentClient))
    {
        if (CurrentClient.PinCode == PINCode)
            return true;
    }
    return false;
}

void LoginScreen()
{
    
    bool LoginFailed = false;
    string AccountNumber, PINCode;
    do
    {
        system("cls");
        cout << "\n---------------------------------------------\n";
        cout << "                 Login Screen\n";
        cout << "---------------------------------------------\n";
        if (LoginFailed)
            cout << "Invalid password or username\n";
        cout << "Enter Account Number: ";
        cin >> AccountNumber;
        cout << "Enter PIN Code: ";
        cin >> PINCode;
        LoginFailed = !LogInAccount(AccountNumber, PINCode);
    } while (LoginFailed);
    ATMMainScreen();
}

int main()

{
    LoginScreen();

    return 0;
}